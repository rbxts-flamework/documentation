"use strict";(self.webpackChunkflamework=self.webpackChunkflamework||[]).push([[4691],{6934:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=a(5893),r=a(1151);const s={title:"Metadata"},o=void 0,i={id:"modding/metadata",title:"Metadata",description:"This page explains Flamework's metadata system as well as the various metadata Flamework exposes. If you'd like to use the metadata Flamework generates, see the Reflect api.",source:"@site/docs/modding/metadata.md",sourceDirName:"modding",slug:"/modding/metadata",permalink:"/docs/modding/metadata",draft:!1,unlisted:!1,editUrl:"https://github.com/rbxts-flamework/documentation/tree/master/docs/modding/metadata.md",tags:[],version:"current",frontMatter:{title:"Metadata"},sidebar:"flamework",previous:{title:"Introduction",permalink:"/docs/modding"},next:{title:"Reflection",permalink:"/docs/modding/reflection"}},d={},l=[{value:"Why do I have to specify metadata?",id:"why-do-i-have-to-specify-metadata",level:2},{value:"How do I request metadata?",id:"how-do-i-request-metadata",level:2},{value:"Universal Metadata",id:"universal-metadata",level:2},{value:"{@link [Reference] constraint}",id:"link-reference-constraint",level:3},{value:"Class Metadata",id:"class-metadata",level:2},{value:"identifier",id:"identifier",level:3},{value:"flamework <code>string[]</code>",id:"flamework-string",level:3},{value:"Field Metadata",id:"field-metadata",level:2},{value:"flamework <code>string</code>",id:"flamework-string-1",level:3},{value:"flamework <code>t.check</code>",id:"flamework-tcheck",level:3},{value:"Method Metadata",id:"method-metadata",level:2},{value:"flamework <code>string[]</code>",id:"flamework-string-2",level:3},{value:"flamework <code>string[]</code>",id:"flamework-string-3",level:3},{value:"flamework <code>t.check[]</code>",id:"flamework-tcheck-1",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["This page explains Flamework's metadata system as well as the various metadata Flamework exposes. If you'd like to use the metadata Flamework generates, see the ",(0,n.jsx)(t.a,{href:"./reflection",children:"Reflect api"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["If there is metadata that you'd like Flamework to generate but it currently doesn't, feel free to open an issue on the ",(0,n.jsx)(t.a,{href:"https://github.com/rbxts-flamework/core/issues",children:"Flamework repo"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"why-do-i-have-to-specify-metadata",children:"Why do I have to specify metadata?"}),"\n",(0,n.jsx)(t.p,{children:"One of Flamework's major goals is to be built upon. To achieve this, Flamework exposes lots of compile-time information to your code, but this metadata can add a lot of bloat if it is unused."}),"\n",(0,n.jsx)(t.p,{children:"Specifying the metadata allows Flamework to generate as little bloat as possible, as you only generate what your code requires."}),"\n",(0,n.jsx)(t.h2,{id:"how-do-i-request-metadata",children:"How do I request metadata?"}),"\n",(0,n.jsxs)(t.p,{children:["Flamework uses the ",(0,n.jsx)(t.code,{children:"@metadata"})," jsdoc tag for metadata. You can place this tag on decorators, interface members or directly on the node. All requested metadata will get combined as shown in the following code."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'/**\n * Generates metadata for users of this decorator.\n * @metadata flamework:parameter_names\n */\nconst Decorator = Modding.createMetaDecorator("Class");\n\n/**\n * Generates metadata for implementors of this interface.\n * @metadata flamework:parameters\n */\ninterface MyInterface {\n\t/**\n\t * Generates metadata for implementations of this method.\n\t * @metadata flamework:parameter_guards\n\t */\n\tmethod(...args: unknown[]): void;\n}\n\n/**\n * Generates metadata for the parent of this comment.\n * @metadata flamework:implements\n */\n@Decorator()\nclass A implements MyInterface {\n\tconstructor(param1: string) {}\n\tmethod(param1: string) {}\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["The example above uses plain text metadata, however, Flamework also supports link metadata. Link metadata allows you to reference a symbol/type in the ",(0,n.jsx)(t.code,{children:"@metadata"})," tag. A caveat with link metadata is that it must be exported in packages otherwise TypeScript will not be able to find the referenced symbol."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"type ConstructorConstraint = new () => defined;\n\n/**\n * @metadata {@link ConstructorConstraint constraint}\n */\n@Decorator()\nclass A {\n\t// ERROR!\n\tconstructor(arg1: string) {}\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"universal-metadata",children:"Universal Metadata"}),"\n",(0,n.jsx)(t.p,{children:"This lists all metadata that are valid on classes and fields."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"link-reference-constraint",children:"{@link [Reference] constraint}"}),"\n",(0,n.jsx)(t.p,{children:"This is a link metadata that allows you to specify a constraint that the field, or class, must follow. This is useful for statically ensuring that you are able to construct classes, call methods, etc."}),"\n",(0,n.jsx)(t.h2,{id:"class-metadata",children:"Class Metadata"}),"\n",(0,n.jsx)(t.p,{children:"This is all the metadata that can be generated on a class declaration."}),"\n",(0,n.jsxs)(t.p,{children:["Classes with constructors also support all ",(0,n.jsx)(t.a,{href:"#method-metadata",children:"method metadata"}),"."]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"identifier",children:"identifier"}),"\n",(0,n.jsxs)(t.p,{children:["This generates the ",(0,n.jsx)(t.code,{children:"identifier"})," metadata which is a unique identifier that refers specifically to this class."]}),"\n",(0,n.jsx)(t.p,{children:"This is only necessary on roblox-ts decorators as Flamework decorators automatically include this metadata."}),"\n",(0,n.jsxs)(t.h3,{id:"flamework-string",children:["flamework",":implements"," ",(0,n.jsx)(t.code,{children:"string[]"})]}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsx)(t.p,{children:"This metadata is required for lifecycle events. If you want to use lifecycle events, you must request this metadata."})}),"\n",(0,n.jsx)(t.p,{children:"Specifies all the implemented interfaces using their Flamework IDs."}),"\n",(0,n.jsx)(t.h2,{id:"field-metadata",children:"Field Metadata"}),"\n",(0,n.jsx)(t.p,{children:"This is all the metadata that can be generated on a field (method or property)."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsxs)(t.h3,{id:"flamework-string-1",children:["flamework",":return_type"," ",(0,n.jsx)(t.code,{children:"string"})]}),"\n",(0,n.jsx)(t.p,{children:"Specifies the ID of the method's return type or a property's type."}),"\n",(0,n.jsxs)(t.h3,{id:"flamework-tcheck",children:["flamework",":return_guard"," ",(0,n.jsx)(t.code,{children:"t.check"})]}),"\n",(0,n.jsx)(t.p,{children:"Generates a type guard for the return type of this method or the type of this property."}),"\n",(0,n.jsx)(t.h2,{id:"method-metadata",children:"Method Metadata"}),"\n",(0,n.jsx)(t.p,{children:"This is all the metadata that can be generated on a method or class (of its constructor)."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsxs)(t.h3,{id:"flamework-string-2",children:["flamework",":parameters"," ",(0,n.jsx)(t.code,{children:"string[]"})]}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsx)(t.p,{children:"This metadata is required by Flamework's dependency resolution. If you want to use Flamework's dependency resolution, you must request this metadata."})}),"\n",(0,n.jsx)(t.p,{children:"Specifies the ID of every parameter."}),"\n",(0,n.jsxs)(t.h3,{id:"flamework-string-3",children:["flamework",":parameter_names"," ",(0,n.jsx)(t.code,{children:"string[]"})]}),"\n",(0,n.jsxs)(t.p,{children:["Specifies the name of every parameter. If a binding is used then the name will be ",(0,n.jsx)(t.code,{children:"_binding_"}),"."]}),"\n",(0,n.jsxs)(t.h3,{id:"flamework-tcheck-1",children:["flamework",":parameter_guards"," ",(0,n.jsx)(t.code,{children:"t.check[]"})]}),"\n",(0,n.jsx)(t.p,{children:"Generates a type guard for every parameter."})]})}function m(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,t,a)=>{a.d(t,{Z:()=>i,a:()=>o});var n=a(7294);const r={},s=n.createContext(r);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);