"use strict";(self.webpackChunkflamework=self.webpackChunkflamework||[]).push([[4508],{7572:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=t(5893),n=t(1151);const a={title:"Flamework v1.2.0",authors:"fireboltofdeath",tags:["Release"]},s=void 0,l={permalink:"/blog/2024/03/21/flamework-release",editUrl:"https://github.com/rbxts-flamework/documentation/tree/master/blog/2024-03-21-flamework-release.md",source:"@site/blog/2024-03-21-flamework-release.md",title:"Flamework v1.2.0",description:"Change Log",date:"2024-03-21T00:00:00.000Z",formattedDate:"March 21, 2024",tags:[{label:"Release",permalink:"/blog/tags/release"}],readingTime:1.125,hasTruncateMarker:!0,authors:[{name:"fireboltofdeath",title:"Maintainer",url:"https://github.com/Fireboltofdeath",imageURL:"https://avatars.githubusercontent.com/u/24422634?v=4",key:"fireboltofdeath"}],frontMatter:{title:"Flamework v1.2.0",authors:"fireboltofdeath",tags:["Release"]},unlisted:!1,nextItem:{title:"Flamework v1.1.0",permalink:"/blog/2024/01/21/flamework-release"}},i={authorsImageUrls:[void 0]},c=[{value:"Change Log",id:"change-log",level:2},{value:"Additions",id:"additions",level:2},{value:"Core",id:"core",level:3},{value:"Networking",id:"networking",level:3},{value:"Transformer",id:"transformer",level:3},{value:"Changes",id:"changes",level:2},{value:"roblox-ts decorators",id:"roblox-ts-decorators",level:3}];function d(e){const r={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"change-log",children:"Change Log"}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.a,{href:"https://github.com/rbxts-flamework/core/commits/master",children:"@flamework/core"}),"\n",(0,o.jsx)(r.a,{href:"https://github.com/rbxts-flamework/components/commits/master",children:"@flamework/components"}),"\n",(0,o.jsx)(r.a,{href:"https://github.com/rbxts-flamework/networking/commits/master",children:"@flamework/networking"}),"\n",(0,o.jsx)(r.a,{href:"https://github.com/rbxts-flamework/transformer/commits/master",children:"rbxts-transformer-flamework"})]}),"\n",(0,o.jsx)(r.h2,{id:"additions",children:"Additions"}),"\n",(0,o.jsx)(r.h3,{id:"core",children:"Core"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Fixed the ",(0,o.jsx)(r.code,{children:"constructor"})," field always being ",(0,o.jsx)(r.code,{children:"undefined"})," on decorator descriptors."]}),"\n"]}),"\n",(0,o.jsx)(r.h3,{id:"networking",children:"Networking"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Fixed a bug where Flamework would always create both a reliable and unreliable remote."}),"\n"]}),"\n",(0,o.jsx)(r.h3,{id:"transformer",children:"Transformer"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#roblox-ts-decorators",children:"Reflection support for roblox-ts decorators."})}),"\n",(0,o.jsxs)(r.li,{children:["Added support for nominal fields in guard generation.","\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["This means types like ",(0,o.jsx)(r.code,{children:"string & { _nominal_mynominalfield: never }"})," will become just ",(0,o.jsx)(r.code,{children:"t.string"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.li,{children:"Fixed bug that triggered a diagnostic when extending a user macro class."}),"\n",(0,o.jsxs)(r.li,{children:["Fix crash when generating guards with an ",(0,o.jsx)(r.code,{children:"unknown"})," field."]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"changes",children:"Changes"}),"\n",(0,o.jsx)(r.h3,{id:"roblox-ts-decorators",children:"roblox-ts decorators"}),"\n",(0,o.jsx)(r.p,{children:"Flamework now supports reflection for native roblox-ts decorators, and they can be used in place (or alongside) of Flamework decorators."}),"\n",(0,o.jsxs)(r.p,{children:["By default, Flamework will ignore roblox-ts decorators but you can specify the ",(0,o.jsx)(r.code,{children:"@metadata reflect"})," JSDoc to enable Flamework's reflection.\nUnlike Flamework decorators, roblox-ts decorators with the ",(0,o.jsx)(r.code,{children:"reflect"})," metadata do not automatically generate ",(0,o.jsx)(r.em,{children:"any"})," metadata, including the ",(0,o.jsx)(r.code,{children:"identifier"})," metadata, which must be specified manually."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:"/** @metadata reflect identifier flamework:parameters */\nconst NewDecorator = (ctor: unknown) => {};\n\n@NewDecorator\nclass MyClass {\n\tconstructor(a: string) {}\n}\n"})}),"\n",(0,o.jsxs)(r.p,{children:["As a caveat, you cannot currently use roblox-ts decorators with Flamework's modding API (listeners, ",(0,o.jsx)(r.code,{children:"getDecorator"}),", ",(0,o.jsx)(r.code,{children:"getDecorators"}),", ",(0,o.jsx)(r.code,{children:"getPropertyDecorators"}),", etc.)"]}),"\n",(0,o.jsx)(r.p,{children:"Support for these APIs may be added in a future update but can be implemented fairly easily without Flamework."})]})}function h(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,r,t)=>{t.d(r,{Z:()=>l,a:()=>s});var o=t(7294);const n={},a=o.createContext(n);function s(e){const r=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),o.createElement(a.Provider,{value:r},e.children)}}}]);