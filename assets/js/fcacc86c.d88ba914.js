"use strict";(self.webpackChunkflamework=self.webpackChunkflamework||[]).push([[1396],{3686:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=t(5893),o=t(1151);const s={title:"Flamework v1.1.0",authors:"fireboltofdeath",tags:["Release"]},a=void 0,i={permalink:"/blog/2024/01/21/flamework-release",editUrl:"https://github.com/rbxts-flamework/documentation/tree/master/blog/2024-01-21-flamework-release.md",source:"@site/blog/2024-01-21-flamework-release.md",title:"Flamework v1.1.0",description:"Change Log",date:"2024-01-21T00:00:00.000Z",formattedDate:"January 21, 2024",tags:[{label:"Release",permalink:"/blog/tags/release"}],readingTime:1.94,hasTruncateMarker:!0,authors:[{name:"fireboltofdeath",title:"Maintainer",url:"https://github.com/Fireboltofdeath",imageURL:"https://avatars.githubusercontent.com/u/24422634?v=4",key:"fireboltofdeath"}],frontMatter:{title:"Flamework v1.1.0",authors:"fireboltofdeath",tags:["Release"]},unlisted:!1,prevItem:{title:"Flamework v1.2.0",permalink:"/blog/2024/03/21/flamework-release"},nextItem:{title:"Flamework v1.0.0",permalink:"/blog/2023/12/18/flamework-release"}},l={authorsImageUrls:[void 0]},c=[{value:"Change Log",id:"change-log",level:2},{value:"Additions",id:"additions",level:2},{value:"Core",id:"core",level:3},{value:"Components",id:"components",level:3},{value:"Networking",id:"networking",level:3},{value:"Transformer",id:"transformer",level:3},{value:"Changes",id:"changes",level:2},{value:"Component Listeners",id:"component-listeners",level:3},{value:"Unreliable Remote Events",id:"unreliable-remote-events",level:3},{value:"Networking Namespaces",id:"networking-namespaces",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"change-log",children:"Change Log"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/rbxts-flamework/core/commits/master",children:"@flamework/core"}),"\n",(0,r.jsx)(n.a,{href:"https://github.com/rbxts-flamework/components/commits/master",children:"@flamework/components"}),"\n",(0,r.jsx)(n.a,{href:"https://github.com/rbxts-flamework/networking/commits/master",children:"@flamework/networking"}),"\n",(0,r.jsx)(n.a,{href:"https://github.com/rbxts-flamework/transformer/commits/master",children:"rbxts-transformer-flamework"})]}),"\n",(0,r.jsx)(n.h2,{id:"additions",children:"Additions"}),"\n",(0,r.jsx)(n.h3,{id:"core",children:"Core"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Updated ",(0,r.jsx)(n.code,{children:"@rbxts/t"})," to latest"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"components",children:"Components"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#component-listeners",children:"Added component listener methods"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"networking",children:"Networking"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#unreliable-remote-events",children:"Networking now supports unreliable remote events"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#networking-namespaces",children:"Networking now supports namespaces"})}),"\n",(0,r.jsx)(n.li,{children:"Generated event names are now shuffled to avoid const-matching."}),"\n",(0,r.jsxs)(n.li,{children:["Flamework no longer erases symbol information on events, so ",(0,r.jsx)(n.code,{children:"Find All References"})," and similar tools will now function properly."]}),"\n",(0,r.jsxs)(n.li,{children:["The networking module was rewritten. The behavior should be mostly the same, but there are some small differences.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The way remotes are created is now different."}),"\n",(0,r.jsxs)(n.li,{children:["Guards are now implemented as a middleware, which means ",(0,r.jsx)(n.code,{children:"event.predict"}),"/",(0,r.jsx)(n.code,{children:"function.predict"})," will now be affected by guard checking."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"transformer",children:"Transformer"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"buffer"}),", ",(0,r.jsx)(n.code,{children:"OverlapParams"})," and ",(0,r.jsx)(n.code,{children:"FloatCurveKey"})," are now supported by guard generation."]}),"\n",(0,r.jsxs)(n.li,{children:["Improved emit for user macro objects by omitting fields that result in ",(0,r.jsx)(n.code,{children:"undefined"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"changes",children:"Changes"}),"\n",(0,r.jsx)(n.h3,{id:"component-listeners",children:"Component Listeners"}),"\n",(0,r.jsx)(n.p,{children:"Flamework now supports listening for when specific components are added or removed.\nThese listeners can be disconnected using the returned connection object."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'this.components.onComponentAdded<MyComponent>((myComponent) => {\n\tprint("A new MyComponent has spawned!");\n});\n\nthis.components.onComponentRemoved<MyComponent>((myComponent) => {\n\tprint("RIP MyComponent, you will be missed.");\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"These APIs also support polymorphism using superclasses and interfaces.\nThis allows you to write interfaces to achieve composition behavior, tag certain components using an empty interface, among many other usecases."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface Interactable {\n\tonInteract(): void;\n}\n\nthis.components.onComponentAdded<Interactable>((value) => value.onInteract());\n"})}),"\n",(0,r.jsx)(n.h3,{id:"unreliable-remote-events",children:"Unreliable Remote Events"}),"\n",(0,r.jsxs)(n.p,{children:["Flamework now supports unreliable remote events.\nYou can specify them using the ",(0,r.jsx)(n.code,{children:"Networking.Unreliable"})," type."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface ClientToServerEvents {\n\tmyReliableEvent(): void;\n\tmyUnreliableEvent: Networking.Unreliable<() => void>;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"networking-namespaces",children:"Networking Namespaces"}),"\n",(0,r.jsx)(n.p,{children:"Flamework now supports specifying namespaces under your networking events.\nThis can be useful for organization or for isolating certain types of remotes (e.g reliable/unreliable)"}),"\n",(0,r.jsx)(n.p,{children:"Flamework also supports multiple nested namespaces, up to whatever depth you desire."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface ClientToServerEvents {\n\tnormalEvent(): void;\n\n\tmyCombatEvents: {\n\t\tkillPlayer(): void;\n\t\trevivePlayer(): void;\n\t\teatPlayer(): void;\n\t},\n\n\tmySocialEvents: {\n\t\tdoNotKillPlayer(): void;\n\t\tthrowAParty(): void;\n\t\tinviteFriends(): void;\n\t},\n\n\t// Namespaces don't have to be defined in the same file!\n\tmyRandomNamespace: MyRandomNamespace,\n}\n\n// You can access namespaces as you might expect, through the `Events` object.\nEvents.myCombatEvents.killPlayer();\nEvents.mySocialEvents.throwAParty();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can still specify middleware for namespaced events, by specifying them under your ",(0,r.jsx)(n.code,{children:"middleware"})," configuration."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const Events = GlobalEvents.createServer({\n\tmiddleware: {\n\t\tnormalEvent: [middleware0],\n\t\tmyCombatEvents: {\n\t\t\tkillPlayer: [middleware1, middleware2],\n\t\t}\n\t}\n})\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>a});var r=t(7294);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);