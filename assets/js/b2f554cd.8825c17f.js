"use strict";(self.webpackChunkflamework=self.webpackChunkflamework||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2024/03/21/flamework-release","metadata":{"permalink":"/blog/2024/03/21/flamework-release","editUrl":"https://github.com/rbxts-flamework/documentation/tree/master/blog/2024-03-21-flamework-release.md","source":"@site/blog/2024-03-21-flamework-release.md","title":"Flamework v1.2.0","description":"Change Log","date":"2024-03-21T00:00:00.000Z","formattedDate":"March 21, 2024","tags":[{"label":"Release","permalink":"/blog/tags/release"}],"readingTime":1.125,"hasTruncateMarker":true,"authors":[{"name":"fireboltofdeath","title":"Maintainer","url":"https://github.com/Fireboltofdeath","imageURL":"https://avatars.githubusercontent.com/u/24422634?v=4","key":"fireboltofdeath"}],"frontMatter":{"title":"Flamework v1.2.0","authors":"fireboltofdeath","tags":["Release"]},"unlisted":false,"nextItem":{"title":"Flamework v1.1.0","permalink":"/blog/2024/01/21/flamework-release"}},"content":"## Change Log\\n\\n[@flamework/core](https://github.com/rbxts-flamework/core/commits/master)\\n[@flamework/components](https://github.com/rbxts-flamework/components/commits/master)\\n[@flamework/networking](https://github.com/rbxts-flamework/networking/commits/master)\\n[rbxts-transformer-flamework](https://github.com/rbxts-flamework/transformer/commits/master)\\n\\n## Additions\\n\\n### Core\\n- Fixed the `constructor` field always being `undefined` on decorator descriptors.\\n\\n### Networking\\n- Fixed a bug where Flamework would always create both a reliable and unreliable remote.\\n\\n### Transformer\\n- [Reflection support for roblox-ts decorators.](#roblox-ts-decorators)\\n- Added support for nominal fields in guard generation.\\n\\t- This means types like `string & { _nominal_mynominalfield: never }` will become just `t.string`\\n- Fixed bug that triggered a diagnostic when extending a user macro class.\\n- Fix crash when generating guards with an `unknown` field.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Changes\\n\\n### roblox-ts decorators\\nFlamework now supports reflection for native roblox-ts decorators, and they can be used in place (or alongside) of Flamework decorators.\\n\\nBy default, Flamework will ignore roblox-ts decorators but you can specify the `@metadata reflect` JSDoc to enable Flamework\'s reflection.\\nUnlike Flamework decorators, roblox-ts decorators with the `reflect` metadata do not automatically generate *any* metadata, including the `identifier` metadata, which must be specified manually.\\n\\n```ts\\n/** @metadata reflect identifier flamework:parameters */\\nconst NewDecorator = (ctor: unknown) => {};\\n\\n@NewDecorator\\nclass MyClass {\\n\\tconstructor(a: string) {}\\n}\\n```\\n\\nAs a caveat, you cannot currently use roblox-ts decorators with Flamework\'s modding API (listeners, `getDecorator`, `getDecorators`, `getPropertyDecorators`, etc.)\\n\\nSupport for these APIs may be added in a future update but can be implemented fairly easily without Flamework."},{"id":"/2024/01/21/flamework-release","metadata":{"permalink":"/blog/2024/01/21/flamework-release","editUrl":"https://github.com/rbxts-flamework/documentation/tree/master/blog/2024-01-21-flamework-release.md","source":"@site/blog/2024-01-21-flamework-release.md","title":"Flamework v1.1.0","description":"Change Log","date":"2024-01-21T00:00:00.000Z","formattedDate":"January 21, 2024","tags":[{"label":"Release","permalink":"/blog/tags/release"}],"readingTime":1.94,"hasTruncateMarker":true,"authors":[{"name":"fireboltofdeath","title":"Maintainer","url":"https://github.com/Fireboltofdeath","imageURL":"https://avatars.githubusercontent.com/u/24422634?v=4","key":"fireboltofdeath"}],"frontMatter":{"title":"Flamework v1.1.0","authors":"fireboltofdeath","tags":["Release"]},"unlisted":false,"prevItem":{"title":"Flamework v1.2.0","permalink":"/blog/2024/03/21/flamework-release"},"nextItem":{"title":"Flamework v1.0.0","permalink":"/blog/2023/12/18/flamework-release"}},"content":"## Change Log\\n\\n[@flamework/core](https://github.com/rbxts-flamework/core/commits/master)\\n[@flamework/components](https://github.com/rbxts-flamework/components/commits/master)\\n[@flamework/networking](https://github.com/rbxts-flamework/networking/commits/master)\\n[rbxts-transformer-flamework](https://github.com/rbxts-flamework/transformer/commits/master)\\n\\n## Additions\\n\\n### Core\\n- Updated `@rbxts/t` to latest\\n\\n### Components\\n- [Added component listener methods](#component-listeners)\\n\\n### Networking\\n- [Networking now supports unreliable remote events](#unreliable-remote-events)\\n- [Networking now supports namespaces](#networking-namespaces)\\n- Generated event names are now shuffled to avoid const-matching.\\n- Flamework no longer erases symbol information on events, so `Find All References` and similar tools will now function properly.\\n- The networking module was rewritten. The behavior should be mostly the same, but there are some small differences.\\n\\t- The way remotes are created is now different.\\n\\t- Guards are now implemented as a middleware, which means `event.predict`/`function.predict` will now be affected by guard checking.\\n\\n### Transformer\\n- `buffer`, `OverlapParams` and `FloatCurveKey` are now supported by guard generation.\\n- Improved emit for user macro objects by omitting fields that result in `undefined`.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Changes\\n\\n### Component Listeners\\nFlamework now supports listening for when specific components are added or removed.\\nThese listeners can be disconnected using the returned connection object.\\n\\n```ts\\nthis.components.onComponentAdded<MyComponent>((myComponent) => {\\n\\tprint(\\"A new MyComponent has spawned!\\");\\n});\\n\\nthis.components.onComponentRemoved<MyComponent>((myComponent) => {\\n\\tprint(\\"RIP MyComponent, you will be missed.\\");\\n});\\n```\\n\\nThese APIs also support polymorphism using superclasses and interfaces.\\nThis allows you to write interfaces to achieve composition behavior, tag certain components using an empty interface, among many other usecases.\\n\\n```ts\\ninterface Interactable {\\n\\tonInteract(): void;\\n}\\n\\nthis.components.onComponentAdded<Interactable>((value) => value.onInteract());\\n```\\n\\n### Unreliable Remote Events\\nFlamework now supports unreliable remote events.\\nYou can specify them using the `Networking.Unreliable` type.\\n\\n```ts\\ninterface ClientToServerEvents {\\n\\tmyReliableEvent(): void;\\n\\tmyUnreliableEvent: Networking.Unreliable<() => void>;\\n}\\n```\\n\\n### Networking Namespaces\\nFlamework now supports specifying namespaces under your networking events.\\nThis can be useful for organization or for isolating certain types of remotes (e.g reliable/unreliable)\\n\\nFlamework also supports multiple nested namespaces, up to whatever depth you desire.\\n\\n```ts\\ninterface ClientToServerEvents {\\n\\tnormalEvent(): void;\\n\\n\\tmyCombatEvents: {\\n\\t\\tkillPlayer(): void;\\n\\t\\trevivePlayer(): void;\\n\\t\\teatPlayer(): void;\\n\\t},\\n\\n\\tmySocialEvents: {\\n\\t\\tdoNotKillPlayer(): void;\\n\\t\\tthrowAParty(): void;\\n\\t\\tinviteFriends(): void;\\n\\t},\\n\\n\\t// Namespaces don\'t have to be defined in the same file!\\n\\tmyRandomNamespace: MyRandomNamespace,\\n}\\n\\n// You can access namespaces as you might expect, through the `Events` object.\\nEvents.myCombatEvents.killPlayer();\\nEvents.mySocialEvents.throwAParty();\\n```\\n\\nYou can still specify middleware for namespaced events, by specifying them under your `middleware` configuration.\\n\\n```ts\\nconst Events = GlobalEvents.createServer({\\n\\tmiddleware: {\\n\\t\\tnormalEvent: [middleware0],\\n\\t\\tmyCombatEvents: {\\n\\t\\t\\tkillPlayer: [middleware1, middleware2],\\n\\t\\t}\\n\\t}\\n})\\n```"},{"id":"/2023/12/18/flamework-release","metadata":{"permalink":"/blog/2023/12/18/flamework-release","editUrl":"https://github.com/rbxts-flamework/documentation/tree/master/blog/2023-12-18-flamework-release.md","source":"@site/blog/2023-12-18-flamework-release.md","title":"Flamework v1.0.0","description":"Change Log","date":"2023-12-18T00:00:00.000Z","formattedDate":"December 18, 2023","tags":[{"label":"Release","permalink":"/blog/tags/release"}],"readingTime":6.14,"hasTruncateMarker":true,"authors":[{"name":"fireboltofdeath","title":"Maintainer","url":"https://github.com/Fireboltofdeath","imageURL":"https://avatars.githubusercontent.com/u/24422634?v=4","key":"fireboltofdeath"}],"frontMatter":{"title":"Flamework v1.0.0","authors":"fireboltofdeath","tags":["Release"]},"unlisted":false,"prevItem":{"title":"Flamework v1.1.0","permalink":"/blog/2024/01/21/flamework-release"},"nextItem":{"title":"Flamework v1.0.0-beta.23","permalink":"/blog/2023/08/13/flamework-release"}},"content":"## Change Log\\n\\nFlamework is finally entering its long overdue v1.0.0, and along comes with a plethora of changes.\\n\\nThere have been many breaking changes made to ensure the longevity of Flamework and you should read all of these changes before migrating to `v1.0.0`.\\n\\nA migration guide detailing the larger changes has been included [here](/docs/migration) but it is still recommended that you read the full release notes.\\n\\n[@flamework/core](https://github.com/rbxts-flamework/core/commits/master)\\n[@flamework/components](https://github.com/rbxts-flamework/components/commits/master)\\n[@flamework/networking](https://github.com/rbxts-flamework/networking/commits/master)\\n[rbxts-transformer-flamework](https://github.com/rbxts-flamework/transformer/commits/master)\\n\\n<span style={{color: \\"crimson\\"}}>This release contains breaking changes.</span>\\n\\n## Breaking Changes\\n\\nPackages that depend on Flamework `v1.0.0-beta` will not be compatible with Flamework `v1.0.0` projects.\\n\\n### Transformer\\n- Flamework decorators are now evaluated in the opposite order (bottom -> top) to match TypeScript behavior.\\n\\n### Core\\n- [Flamework decorators now support abstract classes.](#abstract-classes)\\n- [Improved glob support](#improved-glob-support)\\n- The `@External()` decorator has been renamed to `@Optional()` to better communicate intent.\\n- The `Flamework.registerExternalClass` function has been renamed to `Flamework.includeOptionalClass`.\\n\\t- It is no longer necessary to explicitly include optional singletons, if they are part of your game\'s dependency graph.\\n- `Reflect.metadata`, `Reflect.objToId` and `Reflect.decorators` are no longer exposed.\\n- `Flamework.Testing` was removed.\\n- `Flamework.isInitialized`, `Flamework.flameworkConfig` have been removed.\\n- `Flamework.ignite()` no longer accepts a config object.\\n- `Modding.Generic` and `Modding.Caller` have been renamed to `Modding.GenericMany` and `Modding.CallerMany` respectively.\\n\\t- The new `Modding.Generic` and `Modding.Caller` types are able to fetch individual metadata rather than an object containing metadata.\\n- `Flamework.hash` now uses type arguments, such as `Flamework.hash<\\"text\\", \\"context\\">()`\\n- `Dependency(T)` syntax has been removed in favor of `Dependency<T>()` for the sake of consistency.\\n\\n### Components\\n- [Components now allow you to adjust StreamingEnabled support.](#component-streaming-modes)\\n- [Maids are no longer included on BaseComponent by default](#component-maids)\\n- `StarterPack`, `StarterGui`, and `StarterPlayer` are now ignored by default.\\n- Component methods now have a `object` constraint on their generics, as part of the abstract class support.\\n- Internal `BaseComponent` fields are no longer exposed, including: `setInstance`, `setAttribute` and `_attributeChangeHandlers`.\\n\\n### Networking\\n- [Networking configuration refactor](#networking-config-refactor)\\n- [Improved networking handlers](#improved-networking-handlers)\\n\\n## Additions\\n\\n### Core\\n- [Flamework decorators now support abstract classes.](#abstract-classes)\\n- [Improved glob support](#improved-glob-support)\\n- `Flamework.addPaths`/`Flamework.addPathsGlob` is now able to preload packages.\\n- Added `Modding.getObjectFromId` to replace `Reflect.objToId`.\\n\\n### Components\\n- [Components now allow you to adjust StreamingEnabled support.](#component-streaming-modes)\\n- Fixed attribute changed ordering where handlers would fire before the attribute is updated on the component object.\\n\\n### Networking\\n- [Networking configuration refactor](#networking-config-refactor)\\n- [Improved networking handlers](#improved-networking-handlers)\\n- Removed type-based symbol obfuscation, which avoids a common roblox-ts bug with incremental mode.\\n- Networking is now mocked in edit mode to support use cases like UI stories.\\n- Server config and generated type guards are no longer exposed to the client by default.\\n\\n### Transformer\\n- Improved stability, all builtin Flamework macros have been converted to use the user macro machinery.\\n- Added guard generation support for the `Font` datatype. I know, you\'re welcome.\\n- User macros now support union parameters, to optionally generate metadata.\\n- `Modding.Many` user macro types can now be nested.\\n- Fixed some incorrect node factory functions, which caused Flamework to erase certain tokens are generated emit.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Changes\\n\\n### Abstract Classes\\n\\nYou can now create abstract components, singletons, etc. These abstract classes will be ignored by Flamework.\\n\\nTo support abstract components, decorator descriptors (including those returned by `Modding.getDecorators`) will now expose the constructor as an `AbstractConstructor`, which is a breaking change.\\n\\nDecorator descriptors also now include an optional `constructor` field which is typed as a normal constructor and is only present if the attached class is not abstract.\\n\\n### Component Streaming Modes\\n\\nFlamework components now support several streaming modes and a component\'s streaming mode can be adjusted with the `streamingMode` field in its configuration.\\nThe streaming mode dictates how Flamework components behave in regards to hierarchy changes.\\n\\nThere are three streaming modes available currently: `Contextual`, `Watching` and `Disabled`.\\n\\nFlamework uses the `Contextual` streaming mode by default, which is a breaking change as `Contextual` will not watch for hierarchy changes on atomic models.\\nThe `Contextual` streaming mode acts like `Disabled` on the server or on atomic models and `Watching` for everything else.\\n\\n```ts\\nexport enum ComponentStreamingMode {\\n\\t/**\\n\\t * This disables instance guard streaming, and will only run the instance guard once.\\n\\t */\\n\\tDisabled,\\n\\n\\t/**\\n\\t * This will watch for any changes to the instance tree, and rerun the instance guards.\\n\\t */\\n\\tWatching,\\n\\n\\t/**\\n\\t * This determines the appropriate streaming mode based on a couple of factors.\\n\\t *\\n\\t * If on the server, this will always behave like `Disabled`.\\n\\t *\\n\\t * If on the client, and the attached instance is an `Atomic` model, this will behave like `Disabled`.\\n\\t *\\n\\t * Otherwise, this behaves like `Watching`.\\n\\t */\\n\\tContextual,\\n}\\n```\\n\\n### Component Maids\\nFlamework 1.0 has removed the `maid` field from `BaseComponent` and you are expected to provide your own cleanup.\\nYou are able to use any cleanup method including: `Maid`, `Janitor`, or manual cleanup.\\n\\nThis was done as the choice of cleanup solution is largely preference and `Maid`\'s API also did not blend well with the rest of Flamework.\\n\\nYou can use this class as a drop in replacement, updating all of your components to extend `DisposableComponent`.\\n\\n```ts\\nexport class DisposableComponent<A = {}, I extends Instance = Instance> extends BaseComponent<A, I> {\\n\\tprotected maid = new Maid();\\n\\n\\toverride destroy() {\\n\\t\\tthis.maid.Destroy();\\n\\t\\tsuper.destroy();\\n\\t}\\n}\\n```\\n\\n### Improved Glob Support\\nFlamework supported blobs in `addPaths` previously however it had several issues and inconsistencies.\\n\\nSome of the issues include:\\n- Flamework tried to automatically detect when you were using globs, which wasn\'t always accurate.\\n- You had to explicitly specify whether you wanted to match folders or directories\\n\\nMost importantly, though, globs did not automatically update as your file system changed.\\nThis could lead to incorrect preloading behavior if you did not explicitly recompile your runtime file.\\n\\nFlamework 1.0 solves this by utilizing its runtime metadata which will update the paths after every compile.\\nIt is recommended to use globs with as few matches as possible, to avoid generating large amounts of paths.\\n\\nThe `Flamework.addPaths` function no longer accepts globs directly, and you must use `Flamework.addPathsGlob`.\\nThis function supports all glob queries, and does not force you to match directories or files which means you will need to specify that in your glob.\\n\\nSupport for providing multiple paths in a single call has also been removed.\\n\\nRefer to [node-glob documentation](https://github.com/isaacs/node-glob?tab=readme-ov-file#glob-primer) for all supported syntax.\\n\\n### Networking Config Refactor\\nFlamework 1.0 changes how networking events and functions are created/configured.\\n\\nThese changes allow Flamework to hide sensitive information (generated type guards, middleware configuration, etc) from the client, and also allows Flamework to add new configuration in the future.\\n\\n```ts\\n/// Previously\\nconst GlobalEvents = Networking.createEvent<Server, Client>(\\n\\t{ /* server middleware */ },\\n\\t{ /* client middleware */ },\\n\\t{ /* server & client config */ },\\n)\\n\\n/// Now\\nconst GlobalEvents = Networking.createEvent<Server, Client>();\\n\\n// server/networking.ts\\nconst Events = GlobalEvents.createServer({\\n\\t/* server config */\\n})\\n\\n// client/networking.ts\\nconst Events = GlobalEvents.createClient({\\n\\t/* client config */\\n})\\n```\\n\\n### Improved Networking Handlers\\nFlamework has a feature that allows you to connect to certain events, such as when a client sends an invalid request, or returns an invalid response.\\n\\nThese used to be global, under the `Networking` namespace, but in Flamework 1.0, they are now part of your `GlobalEvents` API.\\n\\nThey also no longer pass the related event information as multiple parameters, and instead uses a single object containing all relevant event information."},{"id":"/2023/08/13/flamework-release","metadata":{"permalink":"/blog/2023/08/13/flamework-release","editUrl":"https://github.com/rbxts-flamework/documentation/tree/master/blog/2023-08-13-flamework-release.md","source":"@site/blog/2023-08-13-flamework-release.md","title":"Flamework v1.0.0-beta.23","description":"Change Log","date":"2023-08-13T00:00:00.000Z","formattedDate":"August 13, 2023","tags":[{"label":"Release","permalink":"/blog/tags/release"}],"readingTime":0.73,"hasTruncateMarker":true,"authors":[{"name":"fireboltofdeath","title":"Maintainer","url":"https://github.com/Fireboltofdeath","imageURL":"https://avatars.githubusercontent.com/u/24422634?v=4","key":"fireboltofdeath"}],"frontMatter":{"title":"Flamework v1.0.0-beta.23","authors":"fireboltofdeath","tags":["Release"]},"unlisted":false,"prevItem":{"title":"Flamework v1.0.0","permalink":"/blog/2023/12/18/flamework-release"},"nextItem":{"title":"Flamework v1.0.0-beta.20","permalink":"/blog/2023/04/13/flamework-release"}},"content":"## Change Log\\n\\nThis is a maintenance update containing bug fixes, performance improvements and usability improvements.\\n\\n[@flamework/core](https://github.com/rbxts-flamework/core/commits/master)\\n[@flamework/components](https://github.com/rbxts-flamework/components/commits/master)\\n[@flamework/networking](https://github.com/rbxts-flamework/networking/commits/master)\\n[rbxts-transformer-flamework](https://github.com/rbxts-flamework/transformer/commits/master)\\n\\n### Transformer\\n- Fixed macros not transforming inside decorators and specialized decorator fields.\\n- Improved type guard generation errors and added elaboration for some types.\\n\\n### Core\\n- Improved performance for `OnTick`, `OnPhysics` and `OnRender` lifecycle events by recycling threads.\\n\\n### Components\\n- Improved component warnings.\\n\\t- Component warnings now include the component class name and no longer includes the component identifier.\\n\\t- You can now click on the instance name (note, not the path) to travel directly to that instance.\\n\\n### Networking\\n- Added an option to warn on failed requests.\\n\\t- This can be enabled/disabled using the `warnOnInvalidGuards` in your networking configuration.\\n\\t- By default, `warnOnInvalidGuards` is enabled only in Studio.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Previous Release\\nThe previous version of Flamework is `1.0.0-beta.22`"},{"id":"/2023/04/13/flamework-release","metadata":{"permalink":"/blog/2023/04/13/flamework-release","editUrl":"https://github.com/rbxts-flamework/documentation/tree/master/blog/2023-04-13-flamework-release.md","source":"@site/blog/2023-04-13-flamework-release.md","title":"Flamework v1.0.0-beta.20","description":"Change Log","date":"2023-04-13T00:00:00.000Z","formattedDate":"April 13, 2023","tags":[{"label":"Release","permalink":"/blog/tags/release"}],"readingTime":3.53,"hasTruncateMarker":true,"authors":[{"name":"fireboltofdeath","title":"Maintainer","url":"https://github.com/Fireboltofdeath","imageURL":"https://avatars.githubusercontent.com/u/24422634?v=4","key":"fireboltofdeath"}],"frontMatter":{"title":"Flamework v1.0.0-beta.20","authors":"fireboltofdeath","tags":["Release"]},"unlisted":false,"prevItem":{"title":"Flamework v1.0.0-beta.23","permalink":"/blog/2023/08/13/flamework-release"},"nextItem":{"title":"December 19th Release","permalink":"/blog/2022/12/19/flamework-release"}},"content":"## Change Log\\n\\nFlamework will begin releasing packages with matching versions.\\nYou should use the same version for every Flamework package.\\n\\n[@flamework/core](https://github.com/rbxts-flamework/core/commits/master)\\n[@flamework/components](https://github.com/rbxts-flamework/components/commits/master)\\n[@flamework/networking](https://github.com/rbxts-flamework/networking/commits/master)\\n[rbxts-transformer-flamework](https://github.com/rbxts-flamework/transformer/commits/master)\\n\\n<span style={{color: \\"crimson\\"}}>This release contains breaking changes.</span>\\n\\n### Transformer\\n- TypeScript is now a peer dependency.\\n- Flamework will user the correct parameter length for user macros where it previously didn\'t (such as tuple rest parameters.)\\n- `delete` expressions will now work on component attributes.\\n- Improved union simplification for literal guard generation.\\n\\t- All `literal` guards will combine to a single guard, e.g `1 | 2` will no longer become `t.union(t.literal(1), t.literal(2))`\\n\\n### Core\\n- Added a `profiling` option to `flamework.json` to enable memory categories and microprofiler labels.\\n- [Advanced user macros](#advanced-user-macros)\\n\\n### Components\\n- Added doc comments to all component methods, also removed unnecessary overloads.\\n- Added `waitForComponent` API to wait until a component is added to a specific instance.\\n- Components will now warn whenever a component could not be created for 5+ seconds.\\n\\t- You can define `warningTimeout` in your component settings to override the time, set to 0 to disable.\\n- Added the ability to whitelist/blacklist specific ancestors.\\n\\t- These can be specified using `ancestorWhitelist` and `ancestorBlacklist` in your component settings.\\n\\t- <span style={{color: \\"crimson\\"}}>[BREAKING]</span> Defaults to `ancestorBlacklist: [ServerStorage, ReplicatedStorage]`\\n\\t- <span style={{color: \\"crimson\\"}}>[BREAKING]</span> This does not update when components are reparented.\\n\\n### Networking\\n- Fixed an error whenever `NaN` was sent as an ID.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Changes\\n\\n### Advanced User Macros\\n\\nFlamework now supports much more complex queries using user macros.\\nThe new user macros give you the ability to create arbitrary queries based on inputted objects and arrays.\\n\\nYou can use any TypeScript syntax (mapped types, unions, conditional types, literals, etc) and Flamework will automatically\\ngenerate that object for you.\\n\\nTo use this new system, you must use the `Modding.Many` type.\\n```ts\\n/** @metadata macro */\\nfunction macro<T>(metadata?: Modding.Many<{ [k in keyof T]: Modding.Generic<T[k], \\"guard\\"> }>) {\\n\\tassert(metadata);\\n}\\n\\n// This will generate a new object with the same keys as T, but containing the guard for each element.\\nmacro<{ a: string, b: number }>();\\n```\\n\\n#### Literals\\n\\nFlamework supports generating literal values (numbers, strings, undefined, etc) which can be used to represent complex types, such as conditionals.\\n\\n```ts\\ninterface MacroMetadata<T> {\\n\\tisString: T extends string ? true : false;\\n\\ttaggedConditional: T extends number\\n\\t\\t? [\\"number\\", { value: T }]\\n\\t\\t: [\\"unknown\\", { guard: Modding.Generic<T, \\"guard\\"> }];\\n\\n\\taString: T extends string ? `T is: ${T}` : `T is not a string`;\\n\\taNumber: T extends number ? T : -1;\\n\\taBoolean: T extends boolean ? T : false;\\n\\tmaybeNothing: T extends string | number | boolean ? T : undefined;\\n}\\n```\\n\\n#### De-unification\\n\\nFlamework allows you to convert unions to an array of all constituents.\\nYou can do this simply by wrapping your union in an array.\\n\\n```ts\\nfunction macro<T>(metadata?: Modding.Many<(keyof T)[]>): void;\\n// OR\\nfunction macro<T>(metadata?: Modding.Many<Array<keyof T>>): void;\\n```\\n\\n#### Utility types\\n\\nFlamework also exposes several more types that user macros can use to leverage certain features of Flamework.\\n```ts\\ninterface MacroMetadata<S extends string, T extends unknown[]> {\\n\\thash: Modding.Hash<S, \\"optional context\\">,\\n\\n\\t// Same as `Modding.Hash`, except it is disabled when Flamework obfuscation is off.\\n\\tobfuscated: Modding.Obfuscate<S, \\"optional context\\">,\\n\\n\\t// Fetches the labels from the tuple.\\n\\t// This can also be used to fetch parameter names from `Parameters<T>`\\n\\tlabels: Modding.TupleLabels<T>.\\n}\\n\\nfunction macro<S extends string, T extends unknown[]>(metadata?: Modding.Many<MacroMetadata<S, T>>): void;\\n```\\n\\n#### Inspect\\n\\nThere may be cases where you\'d want to utilize some of Flamework\'s user macros features in plain code.\\nFor example, you might want to retrieve every key from a type, or generate a guard for every member of a type.\\n\\nFlamework provides the `Modding.inspect<T>()` macro which runs `T` through Flamework\'s user macro system.\\n```ts\\ntype MyConstant = typeof myConstant;\\nconst myConstant = {\\n\\ta: { value: \\"default\\" },\\n\\tb: { value: 15 },\\n} as const;\\n\\nconst constantMetadata = Modding.inspect<{\\n\\tkeys: (keyof MyConstant)[],\\n\\tguards: {\\n\\t\\t[k in keyof MyConstant]: Modding.Generic<MyConstant[k][\\"value\\"], \\"guard\\">\\n\\t},\\n}>();\\n```\\n\\n## Previous Release\\nAs of this release, Flamework will begin releasing all Flamework updates with matching versions.\\nThese are the previous versions that you can revert to if you have any issues.\\n```\\n@flamework/core: 1.0.0-beta.8\\n@flamework/networking: 1.0.0-beta.9\\n@flamework/components: 1.0.0-beta.12\\nrbxts-transformer-flamework: 1.0.0-beta.15\\n```"},{"id":"/2022/12/19/flamework-release","metadata":{"permalink":"/blog/2022/12/19/flamework-release","editUrl":"https://github.com/rbxts-flamework/documentation/tree/master/blog/2022-12-19-flamework-release.md","source":"@site/blog/2022-12-19-flamework-release.md","title":"December 19th Release","description":"Change Log","date":"2022-12-19T00:00:00.000Z","formattedDate":"December 19, 2022","tags":[],"readingTime":3.32,"hasTruncateMarker":true,"authors":[{"name":"fireboltofdeath","title":"Maintainer","url":"https://github.com/Fireboltofdeath","imageURL":"https://avatars.githubusercontent.com/u/24422634?v=4","key":"fireboltofdeath"}],"frontMatter":{"title":"December 19th Release","authors":"fireboltofdeath"},"unlisted":false,"prevItem":{"title":"Flamework v1.0.0-beta.20","permalink":"/blog/2023/04/13/flamework-release"},"nextItem":{"title":"June 9th Components Release","permalink":"/blog/2022/06/09/flamework-release"}},"content":"## Change Log\\n\\n[@flamework/core](https://github.com/rbxts-flamework/core/commits/master)\\n[@flamework/components](https://github.com/rbxts-flamework/components/commits/master)\\n[@flamework/networking](https://github.com/rbxts-flamework/networking/commits/master)\\n[rbxts-transformer-flamework](https://github.com/rbxts-flamework/transformer/commits/master)\\n\\n### Transformer\\n- [Added runtime metadata](#runtime-metadata)\\n- Add support for some namespaced enums in guard generation\\n\\n### Core\\n- Added a warning for calling the `Dependency` macro prior to ignition and during preloading.\\n- Added support for file globs with `addPaths` by using `addPaths({ glob: \\"file\\" }, ..)`\\n- Fixed incorrect `Modding.resolveSingleton` return type.\\n- Singletons are now generic and you can define your own\\n\\t- Using the `flamework:singleton` metadata and `flamework:loadOrder` metadata\\n- Singletons are now topologically sorted based on dependencies.\\n\\t- This should remove the need for specifying `loadOrder` in all but rare cases.\\n\\n### Components\\n- Fixed a bug that caused components to lag when streaming models in and out.\\n- [Components now support dependencies](#component-dependencies)\\n\\n### Networking\\n- RemoteFunctions now have custom timeouts with the `invokeWithTimeout` method.\\n- [You can now provide configuration to your networking.](#networking-configuration)\\n- RemoteEvents now use Roblox\'s networking queue which will not fire events until after there is a listener.\\n- Rest arguments are now properly supported.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Changes\\n\\n### Runtime Metadata\\n\\nRuntime metadata is an improvement in how Flamework can deliver some types of code which, at the moment, is only used to transmit configuration from a `flamework.json` file to your game.\\n\\nThis has an advantage of allowing Flamework to apply configuration globally instead of only after ignition, which allows Flamework to provide warnings and log levels which can occur prior to ignition, among other things.\\n\\nIn the future, runtime metadata will likely be used for storing more powerful type guards and other things internal to Flamework.\\n\\n```ts\\nexport interface FlameworkConfig {\\n\\t/**\\n\\t * Defines what logging level Flamework should use.\\n\\t * This can be useful for debugging issues with ignition.\\n\\t */\\n\\tlogLevel?: \\"none\\" | \\"verbose\\";\\n\\n\\t/**\\n\\t * Disables the warnings that occur when you use the `Dependency` macro prior to ignition.\\n\\t * This does not disable warning for using the macro during preloading, as that is always unintended.\\n\\t */\\n\\tdisableDependencyWarnings?: boolean;\\n}\\n```\\n\\n### Component Dependencies\\n\\nYou are now able to use dependency injection on components to depend on other components. This allows components to interact with one another and will automatically add and remove components based on necessity.\\n\\nIf your component depends on another component, it will not be added unless your dependency is added first. Likewise, if your dependency gets removed, so will your component.\\n\\n```ts\\n@Component({ tag: \\"required!\\" })\\nexport class Component1 extends BaseComponent {\\n\\tdoSomething() {\\n\\t\\tprint(\\"I did something!\\");\\n\\t}\\n}\\n\\n@Component({ tag: \\"required!\\" })\\nexport class Component2 extends BaseComponent extends OnStart {\\n\\tconstructor(private component: Component1) {\\n\\t\\tsuper();\\n\\t}\\n\\n\\tonStart() {\\n\\t\\tprint(\\"Telling dependency to do something\\");\\n\\n\\t\\tthis.component.doSomething();\\n\\t}\\n}\\n```\\n\\n### Networking Configuration\\n\\nYou can now specify several different settings for your networking by passing in an object after the middleware.\\n```ts\\nconst GlobalEvents = Networking.createEvent({}, {}, { disableClientGuards: true });\\n```\\n\\nAs well as disabling guards for the server and client, you can also change the default timeout on networking functions.\\n\\n```ts\\nexport interface EventConfiguration {\\n\\t/**\\n\\t * Disables input validation on the server, allowing any value to pass.\\n\\t * Defaults to `false`\\n\\t */\\n\\tdisableServerGuards: boolean;\\n\\n\\t/**\\n\\t * Disables input validation on the client, allowing any value to pass.\\n\\t * Defaults to `false`\\n\\t */\\n\\tdisableClientGuards: boolean;\\n}\\n\\nexport interface FunctionConfiguration {\\n\\t/**\\n\\t * Disables input validation and return validation on the server, allowing any value to pass.\\n\\t * Defaults to `false`\\n\\t */\\n\\tdisableServerGuards: boolean;\\n\\n\\t/**\\n\\t * Disables input validation and return validation on the client, allowing any value to pass.\\n\\t * Defaults to `false`\\n\\t */\\n\\tdisableClientGuards: boolean;\\n\\n\\t/**\\n\\t * The default timeout for requests from the server to the client.\\n\\t * Defaults to `10`\\n\\t */\\n\\tdefaultServerTimeout: number;\\n\\n\\t/**\\n\\t * The default timeout for requests from the client to the server.\\n\\t * Defaults to `30`\\n\\t */\\n\\tdefaultClientTimeout: number;\\n}\\n```\\n\\n## Previous Release\\nIf you run into any issues with the update, you should revert your packages to these specific versions.\\n```\\n@flamework/core: 1.0.0-beta.7\\n@flamework/networking: 1.0.0-beta.8\\n@flamework/components: 1.0.0-beta.10\\nrbxts-transformer-flamework: 1.0.0-beta.14\\n```"},{"id":"/2022/06/09/flamework-release","metadata":{"permalink":"/blog/2022/06/09/flamework-release","editUrl":"https://github.com/rbxts-flamework/documentation/tree/master/blog/2022-06-09-flamework-release.md","source":"@site/blog/2022-06-09-flamework-release.md","title":"June 9th Components Release","description":"Change Log","date":"2022-06-09T00:00:00.000Z","formattedDate":"June 9, 2022","tags":[],"readingTime":0.735,"hasTruncateMarker":true,"authors":[{"name":"fireboltofdeath","title":"Maintainer","url":"https://github.com/Fireboltofdeath","imageURL":"https://avatars.githubusercontent.com/u/24422634?v=4","key":"fireboltofdeath"}],"frontMatter":{"title":"June 9th Components Release","authors":"fireboltofdeath"},"unlisted":false,"prevItem":{"title":"December 19th Release","permalink":"/blog/2022/12/19/flamework-release"},"nextItem":{"title":"May 15th Modding Release","permalink":"/blog/2022/05/15/flamework-release"}},"content":"## Change Log\\n\\n[@flamework/core](https://github.com/rbxts-flamework/core/commits/master)\\n[@flamework/components](https://github.com/rbxts-flamework/components/commits/master)\\n[@flamework/networking](https://github.com/rbxts-flamework/networking/commits/master)\\n[rbxts-transformer-flamework](https://github.com/rbxts-flamework/transformer/commits/master)\\n\\n### Transformer\\n- Added `Vector2int16` to guard generation.\\n- Fixed a bug when your project has multiple rootDirs\\n\\n### Components\\n- Default attributes are now applied as attributes onto instances.\\n- Components API will no longer turn explicit component specifiers into their ID form.\\n- Components API now allows you to pass strings as the component specifier.\\n- Components API now supports inheritance and implements.\\n\\t- The new `getComponents<T>(instance)` API will get all components that implement or extend from T.\\n\\t- The `getAllComponents<T>()` API will also get all components that implement or extend from T.\\n- Fixed a bug where onAttributeChanged would report an incorrect oldValue\\n\\n\x3c!-- truncate --\x3e\\n\\n## Previous Release\\nIf you run into any issues with the update, you should revert your packages to these specific versions.\\n```\\n@flamework/core: 1.0.0-beta.4\\n@flamework/networking: 1.0.0-beta.6\\n@flamework/components: 1.0.0-beta.6\\nrbxts-transformer-flamework: 1.0.0-beta.10\\n```"},{"id":"/2022/05/15/flamework-release","metadata":{"permalink":"/blog/2022/05/15/flamework-release","editUrl":"https://github.com/rbxts-flamework/documentation/tree/master/blog/2022-05-15-flamework-release.md","source":"@site/blog/2022-05-15-flamework-release.md","title":"May 15th Modding Release","description":"Change Log","date":"2022-05-15T00:00:00.000Z","formattedDate":"May 15, 2022","tags":[],"readingTime":2.065,"hasTruncateMarker":true,"authors":[{"name":"fireboltofdeath","title":"Maintainer","url":"https://github.com/Fireboltofdeath","imageURL":"https://avatars.githubusercontent.com/u/24422634?v=4","key":"fireboltofdeath"}],"frontMatter":{"title":"May 15th Modding Release","authors":"fireboltofdeath"},"unlisted":false,"prevItem":{"title":"June 9th Components Release","permalink":"/blog/2022/06/09/flamework-release"},"nextItem":{"title":"November 3rd Release","permalink":"/blog/2021/11/03/flamework-release"}},"content":"## Change Log\\n\\n### Transformer\\n- Flamework will no longer remove decorators that aren\'t Flamework decorators.\\n- Added support for decorators on fields.\\n- Union guard generation ignores symbol types.\\n- [Added configuration option to change how IDs are generated.](#id-generation)\\n- [Added compile-time metadata](/docs/modding/metadata)\\n- [Added user macros](#user-macros)\\n\\n### Core\\n- `Flamework.implements<T>()` no longer narrows constructors into T.\\n- Flamework\'s lifecycle events now use the roblox-ts extensions `@hideinherited` tag.\\n- OnInit and OnStart will use separate memory categories per singleton.\\n- [Added support for modding.](/docs/modding)\\n\\n### Components\\n- <span style={{color: \\"crimson\\"}}>[BREAKING]</span> Components no longer call <code>super.onStart()</code> implicitly.\\n- Components now use the modding API internally\\n\\t- This means you can use custom lifecycle events on components.\\n\\n### Networking\\n- Connect macro guard generation now takes into account optional parameters.\\n\\n### Modding\\n- <span style={{color: \\"crimson\\"}}>[BETA BREAKING]</span> <code>Modding.createDependency</code> no longer adds the dependency as a listener and must be done separately.\\n- You can create Flamework decorators.\\n- You can create custom lifecycle events.\\n- Deferred dependency API allows you to delay the constructor of a class.\\n- Decorators can request specific compile-time metadata.\\n- Dependency resolution can be modified, extended or overridden.\\n- You can add custom values into Flamework\'s default dependency resolution.\\n\\t- `Modding.addDependency(Flamework.id<SomeType>(), objOfSomeType)`\\n\\n\x3c!-- truncate --\x3e\\n\\n## Changes\\n\\n### User Macros\\nMore specific documentation is available in [the modding documentation.](/docs/modding/guides/user-macros)\\n\\nFlamework now allows users to define Flamework-style macros which can tap into metadata about type parameters or the callsite.\\n```ts\\n/** @metadata macro */\\nfunction macro<T>(abc?: Modding.Generic<T, \\"id\\">, xyz?: Modding.Caller<\\"line\\" | \\"char\\">) {\\n\\tassert(abc && xyz);\\n\\n\\tprint(abc.id, `${xyz.line}:${xyz.char}`);\\n}\\n\\nmacro<MyInterface>();\\n```\\n\\n### ID Generation\\nFlamework now supports four different ID generation modes, which can be configured under Flamework\'s config in tsconfig. The default behavior is \\"full\\", which may change in the future. If obfuscation is enabled, and no ID generation mode is specified, the default is changed to \\"obfuscated\\".\\n\\nAll ID generation modes besides full incorporate a unique hash to prevent collisions with other IDs which means these generation modes should not be used in packages.\\n\\n- \\"idGenerationMode\\": \\"full\\"\\n\\t- This should always be used for packages.\\n\\t- **(prefix:)server/services/subfolder/service1@Service1**\\n- \\"idGenerationMode\\": \\"short\\"\\n\\t- Includes only the file name and declaration name.\\n\\t- **(prefix:)service1@Service1\\\\{HASH}**\\n- \\"idGenerationMode\\": \\"tiny\\"\\n\\t- Includes only the declaration name.\\n\\t- **(prefix:)Service1\\\\{HASH}**\\n- \\"idGenerationMode\\": \\"obfuscated\\"\\n\\t- **(prefix:)HASH**\\n\\n## Previous Release\\nIf you run into any issues with the update, you should revert your packages to these specific versions.\\n```\\n@flamework/core: 1.0.0-beta.3\\n@flamework/networking: 1.0.0-beta.6\\n@flamework/components: 1.0.0-beta.5\\nrbxts-transformer-flamework: 1.0.0-beta.9\\n```"},{"id":"/2021/11/03/flamework-release","metadata":{"permalink":"/blog/2021/11/03/flamework-release","editUrl":"https://github.com/rbxts-flamework/documentation/tree/master/blog/2021-11-03-flamework-release.md","source":"@site/blog/2021-11-03-flamework-release.md","title":"November 3rd Release","description":"Change Log","date":"2021-11-03T00:00:00.000Z","formattedDate":"November 3, 2021","tags":[],"readingTime":1.345,"hasTruncateMarker":true,"authors":[{"name":"fireboltofdeath","title":"Maintainer","url":"https://github.com/Fireboltofdeath","imageURL":"https://avatars.githubusercontent.com/u/24422634?v=4","key":"fireboltofdeath"}],"frontMatter":{"title":"November 3rd Release","authors":"fireboltofdeath"},"unlisted":false,"prevItem":{"title":"May 15th Modding Release","permalink":"/blog/2022/05/15/flamework-release"},"nextItem":{"title":"September 14th Release","permalink":"/blog/2021/09/14/flamework-release"}},"content":"## Change Log\\n\\nThis release is primarily bug fixes. Some bugs may require manual action on your part, see [transformer](#potentially-breaking) and [networking](#potentially-breaking-1)\\n\\n### Transformer\\n- Fixed conditional type guard generation.\\n- Fixed properties that do not have initializers in components.\\n- Fixed constructor-inferred types on components.\\n- Fixed abstract members on components.\\n- Fixed Enum guard generation.\\n- Fixed Enum union (`Enum.A | Enum.B`) guard generation.\\n- Add warning when `Dependency` macro is outside of a function.\\n- Add support for EnumItem literal guard generation.\\n- Decreased output clutter when compiling in verbose mode.\\n- Improved TS version mismatch errors.\\n##### Potentially breaking\\n- [Improved `addPaths` macro.](#addpaths-improvements)\\n\\n---\\n### Core\\n- Removed preloaded messages\\n\\n---\\n### Networking\\n- Server-sided events and functions now have `predict` methods.\\n##### Potentially breaking\\n- Middleware and networking function connections are now (optionally) asynchronous.\\n\\t- This may require changes for existing networking function middleware, as `processNext` now returns a promise.\\n\\n---\\n### Components\\n- Fixed incorrect return type on `Components.getComponent`\\n\\n\x3c!-- truncate --\x3e\\n\\n## Changes\\n\\n### `addPaths` improvements\\n`addPaths` once again supports preloading only specific files as well as relative paths.\\nWhen using globs (e.g * or **), relative paths will be disabled and only entire folders can be preloaded.\\n\\nIf your project is a multi-place project, you will have to update your paths to be relative to your project\'s root directory due to a bug with `addPaths` which has now been fixed.\\n\\n## Previous Release\\nIf you run into any issues with the update, you should revert your packages to these specific versions.\\n```\\n@flamework/core: 1.0.0-beta.1\\n@flamework/networking: 1.0.0-beta.5\\n@flamework/components: 1.0.0-beta.4\\nrbxts-transformer-flamework: 1.0.0-beta.7\\n```"},{"id":"/2021/09/14/flamework-release","metadata":{"permalink":"/blog/2021/09/14/flamework-release","editUrl":"https://github.com/rbxts-flamework/documentation/tree/master/blog/2021-09-14-flamework-release.md","source":"@site/blog/2021-09-14-flamework-release.md","title":"September 14th Release","description":"Change Log","date":"2021-09-14T00:00:00.000Z","formattedDate":"September 14, 2021","tags":[],"readingTime":2.995,"hasTruncateMarker":true,"authors":[{"name":"fireboltofdeath","title":"Maintainer","url":"https://github.com/Fireboltofdeath","imageURL":"https://avatars.githubusercontent.com/u/24422634?v=4","key":"fireboltofdeath"}],"frontMatter":{"title":"September 14th Release","authors":"fireboltofdeath"},"unlisted":false,"prevItem":{"title":"November 3rd Release","permalink":"/blog/2021/11/03/flamework-release"}},"content":"## Change Log\\n\\n### Transformer\\n- Consistent ID generation for non-obfuscated packages.\\n- SourceFiles are validated prior to Flamework transforming them.\\n\\t- This can lead to slightly slower compile times, but decreases chance of incorrect emit and diagnostics.\\n\\t- You can disable this via the transformer\'s `noSemanticDiagnostics` option, but this is not recommended.\\n\\n### Core\\n- Flamework.addPaths now has glob support.\\n\\t- `Flamework.addPaths(\\"src/features/*/server\\")`\\n\\n### Networking\\n- You can now pass player arrays to event.fire()\\n- [Promise-based remote functions are now supported.](#remote-functions)\\n- [Global networking events.](#global-networking-events)\\n- <span style={{color: \\"crimson\\"}}>[BREAKING]</span> <a href=\\"#revised-networking-structure\\">Revised structure for networking.</a>\\n\\n### Components\\n- Added `Components.getAllComponents<T>()` for fetching all components of a certain type.\\n- Components will move all constructor logic (fields, constructor body, etc) into onStart automatically.\\n\\t- If you\'re not using the `OnStart` event, you cannot have a method named `onStart` in a component.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Changes\\n\\n### Revised Networking Structure\\nFlamework\'s event objects are now solely comprised of the developer-specified events, so methods like `connect` and `predict` are no longer under the main `Events` object, but is now under each event separately.\\n\\nNow that events are connected to via the same way they are fired, this means events that have the same name on server and client will both have receiver methods (`connect`, `predict`) as well as sender methods (`fire`, `except`, `broadcast`) where applicable.\\n\\nNetworking functions also follow this structure, but are new and therefore do not have any breaking changes.\\n\\nThis was done to prevent accidental breaking changes in the future, as well as for stylistics reasons.\\n\\n#### Converting to the new structure\\n```ts\\n// old\\nEvents.connect(\\"myEvent\\", () => {});\\nEvents.predict(\\"myEvent\\");\\n\\n// new\\nEvents.myEvent.connect(() => {});\\nEvents.myEvent.predict();\\n```\\n\\n### Global Networking Events\\nCurrently, Flamework allows you to register handlers for two different events.\\nIt is not recommended to directly punish players over these events, as there are many ways an invalid value could be provided.\\n\\n- onBadRequest\\n\\t- Fires whenever a client (or the server) sends incorrect arguments to an event/function.\\n\\t- First parameter is the player (or LocalPlayer on the client.)\\n\\t- Second parameter is the NetworkInfo object, containing information about the specific event/function.\\n\\t- Third parameter is the argument number which failed the type guards.\\n- onBadResponse\\n\\t- Fires whenever a client (or the server) returns an incorrect value from a networking function.\\n\\t- First parameter is the player (or LocalPlayer on the client.)\\n\\t- Second parameter is the NetworkInfo object, containing information about the specific event/function.\\n\\n```ts\\nNetworking.registerNetworkHandler(\\"onBadRequest\\", (player, event, failedArg) => {\\n\\tprint(player, \\"fired\\", event.name, \\"but passed invalid value for argument\\", failedArg);\\n});\\n```\\n\\n### Remote Functions\\nFlamework now supports an equivalent of RemoteFunctions, using promises.\\nYou can fire and receive on both client and server, but only one callback can be registered at one time.\\n\\n\\n#### Defining a new RemoteFunction\\n```ts\\ninterface ServerFunctions {\\n\\tmyServerFunction(param1: string, param2: number): Instance | undefined;\\n}\\n\\ninterface ClientFunctions {\\n\\tmyClientFunction(param1: string, param2: number): Instance | undefined;\\n}\\n\\nexport const GlobalFunctions = Networking.createFunction<ServerFunctions, ClientFunctions>({\\n\\t// server middleware\\n}, {\\n\\t// client middleware\\n})\\n```\\n\\n#### Using a networking function\\n```ts\\n// server\\nFunctions.prompt.invoke(player, \\"Yes\\", \\"No\\").then((result) => print(\\"player said\\", result));\\nFunctions.fetchData.setCallback((player, kind) => {\\n\\treturn kind === \\"Coins\\" ? getPlayerCoins(player) : getPlayerGems(player);\\n})\\n\\n// client\\nFunctions.fetchData.invoke(\\"Coins\\").then((result) => print(\\"I have\\", result, \\"coins!\\"));\\nFunctions.prompt.setCallback((option1, option2) => {\\n\\treturn math.random() < 0.5 ? option1 : option2;\\n})\\n\\n// prediction (fire a client function on the client)\\nFunctions.prompt.predict(\\"Yes\\", \\"No\\").then((result) => print(\\"I chose\\", result));\\n```\\n\\n## Previous Release\\nIf you run into any issues with the update, you should revert your packages to these specific versions.\\n```\\n@flamework/core: 1.0.0-beta.0\\n@flamework/networking: 1.0.0-beta.2\\n@flamework/components: 1.0.0-beta.3\\nrbxts-transformer-flamework: 1.0.0-beta.3\\n```"}]}')}}]);